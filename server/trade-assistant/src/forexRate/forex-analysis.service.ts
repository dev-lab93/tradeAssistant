/* eslint-disable prettier/prettier */
import { Injectable } from '@nestjs/common';
import { ForexRateService } from './forex-rate.service';

@Injectable()
export class ForexAnalysisService {
  constructor(private readonly forexRateService: ForexRateService) {}

  async analyzeTrends() {
    const records = await this.forexRateService.findAll();
    if (records.length < 3)
      return { message: '–ù–µ–º–∞ –¥–æ–≤–æ–ª–Ω–æ –ø–æ–¥–∞—Ç–æ—Ü–∏ –∑–∞ –¥–Ω–µ–≤–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ—Ç—Ä–µ–±–Ω–∏ —Å–µ 3 —Ñ–µ—Ç—á–∞).' };

    // –ì–∏ –∑–µ–º–∞–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 3 –∑–∞–ø–∏—Å–∏ (–Ω–∞—ò–Ω–æ–≤–∏—Ç–µ)
    const [latest, mid, first] = records.slice(0, 3);

    const trends = Object.keys(latest.rates).map((currency) => {
      const start = first.rates[currency];
      const midt = mid.rates[currency];
      const end = latest.rates[currency];
      const change = ((end - start) / start) * 100;

      return {
        currency,
        start,
        mid: midt,
        end,
        dailyChange: Number(change.toFixed(3)),
        trend:
          change > 0 ? 'üìà –†–∞—Å—Ç –≤–æ —Ç–µ–∫–æ—Ç –Ω–∞ –¥–µ–Ω–æ—Ç' :
          change < 0 ? 'üìâ –ü–∞–¥ –≤–æ —Ç–µ–∫–æ—Ç –Ω–∞ –¥–µ–Ω–æ—Ç' :
          '‚è∏Ô∏è –ë–µ–∑ –ø—Ä–æ–º–µ–Ω–∞',
      };
    });

    return {
      base: latest.base,
      from: first.createdAt,
      to: latest.createdAt,
      trends,
    };
  }
}
